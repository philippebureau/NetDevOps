---
# this playbook generate and deploys CVP onboarding tokens for CVaaS and on-prem CVP clusters
# 
# REQUIREMENTS: have a service account token for CVaaS and on-prem CVP
# IMPORTANT: Tokens will be called onprem-token and cvaas-token and copied in /tmp directory.
#            Make sure to configure TerminAttr with appropriate topen path and names

######
# Available tags:
#  | tokens: generates tokens for CVaaS and onprem CVP
#  | cvaas_token: generates token for CVaaS only
#  | onprem_token: generates token for onprem CVP only
#  | deploy: deploy both CVaaS and onprem CVP tokens, should be used with tokens tag
#  | deploy_cvaas: deploy CVaaS token only, should be used with cvaas_token tag
#  | deploy_onprem: deploy onprem_CVP token only, should be used with onprem_token tag
#  | delete: delete tokens
######

############
# USER INPUT
############

- name: Set facts
  hosts: localhost
  gather_facts: false
  tasks:
    - name: set CVaaS facts
      tags: [ tokens, cvaas_token ]
      ansible.builtin.set_fact:
        # CVP variables
        cvaas_host: "www.cv-prod-na-northeast1-b.arista.io"                # change the URL to the right CVaaS instance
        cvaas_token: "{{lookup('file', '~/cvaas_arista_ce_canada.tok')}}"        # point to service account token file or replace with token content
    - name: set onprem CVP facts
      tags: [ tokens, onprem_token ]
      ansible.builtin.set_fact:
        # CVP variables
        cvp_onprem_host: "10.18.175.95"                                     # change the IP to the right CVP On-prem instance
        cvp_token: "{{lookup('file', '~/ACT_AVD_CI_EXTENDED.tok')}}"        # point to service account token file or replace with token content
    - name: set EOS deploy targets
      tags: [ always ]
      # EOS targets from inventory
      ansible.builtin.set_fact:
        eos_targets: "DATACENTER"                                        # Change to match EOS targets in inventory

    - name: set EOS facts
      tags: [ deploy, deploy_cvaas, deploy_onprem ]
      ansible.builtin.set_fact:
        # EOS variables
        ansible_user: "cvpadmin"                                           # Change to match EOS devices user
        ansible_password: "arista123"                                      # Change to match EOS devices password
      delegate_to: "{{ item }}"
      delegate_facts: True
      with_items: "{{ groups['all'] }}"
      when: item != "localhost"
############

  pre_tasks:
    # Enforce the use of tags with the playbook
    - name: set tag facts
      set_fact:
        tag_facts: |
          >>>>>>>>>>>> YOU MUST RUN THIS PLAYBOOK WITH TAGS! <<<<<<<<<<<<
          Available tags:
            tokens: generates tokens for CVaaS and onprem CVP
            cvaas_token: generates token for CVaaS only
            onprem_token: generates token for onprem CVP only
            deploy: deploy both CVaaS and onprem CVP tokens, should be used with tokens tag
            deploy_cvaas: deploy CVaaS token only, should be used with cvaas_token tag
            deploy_onprem: deploy onprem_CVP token only, should be used with onprem_token tag
            delete: delete tokens
    - name: Prevent run without tags
      debug:
        msg: "{{ tag_facts.splitlines() }}"
      notify:
        - fail_playbook
    - name: fail_playbook
      ansible.builtin.fail:
        msg: "Braking playbook execution"

- name: "Create onboarding tokens on CVaaS and on-prem CVP"
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
  - name: "Generating TerminAttr onboarding token on CVaaS instance"
    tags: [ tokens, cvaas_token ]
    ansible.builtin.uri:
      url: "{{ 'https://' ~ cvaas_host ~ '/api/v3/services/admin.Enrollment/AddEnrollmentToken' }}"
      method: POST
      headers:
        Accept: "application/json"
        Cookie: "access_token={{ cvaas_token }}"
      validate_certs: no
      return_content: yes
      body: '{"enrollmentToken": {"reenrollDevices": ["*"], "validFor": "720h"}}'
    register: cv_onboarding_token
    until: cv_onboarding_token.status == 200
    retries: 10
    delay: 2
  - name: "Parsing CVaaS token"
    tags: [ tokens, cvaas_token ]
    set_fact:
      cv_onboarding_token: "{{ cv_onboarding_token.content | list | join }}"
  - name: "Writing CVaaS token to file"
    tags: [ tokens, cvaas_token ]
    copy:
      content: "{{ cv_onboarding_token[0].enrollmentToken.token }}"
      dest: "./cvaas-token"

  - name: "Generating TerminAttr onboarding token on onprem instance"
    tags: [ tokens, onprem_token ]
    ansible.builtin.uri:
      url: "https://{{ cvp_onprem_host }}/cvpservice/enroll/createToken"
      method: POST
      headers:
        Accept: "application/json"
        Cookie: "access_token={{ cvp_token }}"
      validate_certs: no
      return_content: yes
      body: '{"reenrollDevices": ["*"], "duration": "720h"}'
    register: token
    until: token.status == 200
    retries: 10
    delay: 2
  # Writing onprem token to file
  - name: "Parsing onprem CVP token"
    tags: [ tokens, onprem_token ]
    set_fact:
      token: "{{ token.content | list | join }}"
  - name: "Writing onprem CVP token to file"
    tags: [ tokens, onprem_token ]
    copy:
      content: "{{ token.data }}"
      dest: "./onprem-token"

- name: Deploy token
  hosts: "{{ hostvars['localhost']['eos_targets'] }}"
  connection: httpapi
  gather_facts: false
  vars:
    ansible_network_os: eos
    ansible_become: yes
    ansible_become_method: enable
    validation_mode_loose: true
    #ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
  tasks:
    - name: deploy tokens
      tags: [ deploy ]
      ansible.builtin.uri:
        url: "https://{{ansible_user}}:{{ansible_password}}@{{hostvars[inventory_hostname].ansible_host}}/command-api"
        method: POST
        headers:
          Accept: "application/json"
        validate_certs: no
        return_content: yes
        force_basic_auth: true
        body:
          jsonrpc: "2.0"
          method: "runCmds"
          params:
            version: 1
            cmds:
            - "enable"
            - cmd: "copy terminal: file:/tmp/cvaas-token"
              input: "{{lookup('file', './cvaas-token')}}"
            - cmd: "copy terminal: file:/tmp/onprem-token"
              input: "{{lookup('file', './onprem-token')}}"
            format: json
            timestamps: false
            autoComplete: false
            expandAliases: false
            stopOnError: false
            streaming: false
            includeErrorDetail: false
          id: EapiExplorer-1
        body_format: json
      register: cv_onboarding_token
      until: cv_onboarding_token.status == 200
      retries: 2
      delay: 2

    - name: deploy CVaaS token
      tags: [ deploy_cvaas ]
      ansible.builtin.uri:
        url: "https://{{ansible_user}}:{{ansible_password}}@{{hostvars[inventory_hostname].ansible_host}}/command-api"
        method: POST
        headers:
          Accept: "application/json"
        validate_certs: no
        return_content: yes
        force_basic_auth: true
        body:
          jsonrpc: "2.0"
          method: "runCmds"
          params:
            version: 1
            cmds:
            - "enable"
            - cmd: "copy terminal: file:/tmp/cvaas-token"
              input: "{{lookup('file', './cvaas-token')}}"
            format: json
            timestamps: false
            autoComplete: false
            expandAliases: false
            stopOnError: false
            streaming: false
            includeErrorDetail: false
          id: EapiExplorer-1
        body_format: json
      register: cv_onboarding_token
      until: cv_onboarding_token.status == 200
      retries: 2
      delay: 2

    - name: deploy CVaaS token
      tags: [ deploy_onprem ]
      ansible.builtin.uri:
        url: "https://{{ansible_user}}:{{ansible_password}}@{{hostvars[inventory_hostname].ansible_host}}/command-api"
        method: POST
        headers:
          Accept: "application/json"
        validate_certs: no
        return_content: yes
        force_basic_auth: true
        body:
          jsonrpc: "2.0"
          method: "runCmds"
          params:
            version: 1
            cmds:
            - "enable"
            - cmd: "copy terminal: file:/tmp/onprem-token"
              input: "{{lookup('file', './onprem-token')}}"
            format: json
            timestamps: false
            autoComplete: false
            expandAliases: false
            stopOnError: false
            streaming: false
            includeErrorDetail: false
          id: EapiExplorer-1
        body_format: json
      register: cv_onboarding_token
      until: cv_onboarding_token.status == 200
      retries: 2
      delay: 2

- name: Delete tokens
  hosts: localhost
  gather_facts: false
  tags: [ delete ]
  tasks:
    - name: Remove CVaaS token
      ansible.builtin.file:
        path: ./cvaas-token
        state: absent
    - name: Remove on-prem CVP token
      ansible.builtin.file:
        path: ./onprem-token
        state: absent