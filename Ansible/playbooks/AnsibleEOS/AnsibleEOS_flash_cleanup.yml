# This playbook will "cleanup" the EOS device flash by removing all EOS images not currently used to boot
# REQUIREMENTS:
#  - install ansible-core (pip install ansible-core)
#  - install arista.eos ansible galaxy collection (ansible-galaxy collection install arista.eos)
# TO RUN:
#  ansible-playbook playbooks/AnsibleEOS/AnsibleEOS_flash_cleanup.yml -i inventory/inventory.yml

- name: Cleanup the flash on EOS devices
  hosts: POD1                 # change to point at correct target(s)
  connection: network_cli
  gather_facts: false

  vars_prompt:
  - name: username
    prompt: "EOS Username"
    private: no
  - name: password
    prompt: "EOS Password"
    private: yes

  vars:
    ansible_user: "{{ username }}"
    ansible_password: "{{ password }}"
    ansible_network_os: eos
    ansible_become: yes
    ansible_become_method: enable
    validation_mode_loose: true
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    # Use older EOS ciphers before 4.31.0 for python 3.10, uncomment line below 
    # ansible_httpapi_ciphers: AES256-SHA:DHE-RSA-AES256-SHA:AES128-SHA:DHE-RSA-AES128-SHA

  tasks:
    - name: gather facts
      arista.eos.eos_facts:
        gather_subset: min

    - name: get list of SWI files in flash
      arista.eos.eos_command:
        commands: [ "dir flash:/*.swi | json" ]
      register: found_files

    - name: create list of commands to delete the EOS files not in use
      ansible.builtin.set_fact:
        delete_list: |
          {% set delete_list = [] %}
          {% for eos in found_files.stdout[0]['urls']['flash:/*.swi']['entries'].keys() %}
          {%   if eos != ansible_facts.net_image.split('/')[-1] %}
          {%     set delete_list = delete_list.append("delete flash:/" + eos) %}
          {%   endif %}
          {% endfor %}
          {{ delete_list }}

    - name: delete EOS images not in use
      arista.eos.eos_command:
        commands: "{{delete_list}}"

    - name: Files deleted
      ansible.builtin.debug:
        msg: |
          {% set deleted_files = [] %}
          {% for file in delete_list %}
          {%   set deleted_files = deleted_files.append(file.split('delete ')[-1]) %}
          {% endfor %}
          {{ deleted_files }}
